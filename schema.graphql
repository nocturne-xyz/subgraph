enum DepositEventType {
  Instantiated
  Retrieved
  Processed
}

type DepositEvent @entity(immutable: true) {
  id: ID!
  type: DepositEventType!
  spender: Bytes!
  encodedAssetAddr: BigInt!
  encodedAssetId: BigInt!
  value: BigInt!
  depositAddrH1: BigInt!
  depositAddrH2: BigInt!
  nonce: BigInt!
  gasCompensation: BigInt!
  # undefined unless completed
  noteMerkleIndex: BigInt
}

enum DepositRequestStatus {
  Pending
  Completed
  Retrieved
}

type DepositRequest @entity(immutable: false) {
  id: ID!
  createdAtTotalEntityIndex: BigInt!
  instantiationTxHash: Bytes!
  completionTxHash: Bytes
  retrievalTxHash: Bytes
  status: DepositRequestStatus!
  spender: Bytes!
  encodedAssetAddr: BigInt!
  encodedAssetId: BigInt!
  value: BigInt!
  depositAddrH1: BigInt!
  depositAddrH2: BigInt!
  nonce: BigInt!
  gasCompensation: BigInt!
  # undefined unless completed
  noteMerkleIndex: BigInt
}

type EncodedOrEncryptedNote @entity(immutable: true) {
  id: ID!
  merkleIndex: BigInt!
  note: EncodedNote
  encryptedNote: EncryptedNote
}

type EncodedNote @entity(immutable: true) {
  id: ID!
  ownerH1: BigInt!
  ownerH2: BigInt!
  nonce: BigInt!
  encodedAssetAddr: BigInt!
  encodedAssetId: BigInt!
  value: BigInt!
}

type EncryptedNote @entity(immutable: true) {
  id: ID!
  ciphertextBytes: Bytes!
  encapsulatedSecretBytes: Bytes!
  commitment: BigInt!
}

type Nullifier @entity(immutable: true) {
  id: ID!
  nullifier: BigInt!
}

type SubtreeCommit @entity(immutable: true) {
  id: ID!
  newRoot: BigInt!
  subtreeBatchOffset: BigInt!
}

type FilledBatchWithZerosEvent @entity(immutable: true) {
  id: ID!
  startIndex: BigInt!
  numZeros: BigInt!
}

# "flattened" event over all tree insertions for easier linear scans
type TreeInsertionEvent @entity(immutable: true) {
  id: ID!

  # plaintext note insertion (from a deposit or refund)
  encodedNoteOwnerH1: BigInt
  encodedNoteOwnerH2: BigInt
  encodedNoteNonce: BigInt
  encodedNoteEncodedAssetAddr: BigInt
  encodedNoteEncodedAssetId: BigInt
  encodedNoteValue: BigInt

  # encrypted note insertion (from a joinsplit)
  encryptedNoteCiphertextBytes: Bytes
  encryptedNoteEncapsulatedSecretBytes: Bytes
  encryptedNoteCommitment: BigInt

  # tree batch filled with zeros
  filledBatchWithZerosStartIndex: BigInt
  filledBatchWithZerosNumZeros: BigInt
}

# "flattened" event over everything SDK needs for easier linear scans
type SDKEvent @entity(immutable: true) {
  id: ID!

  # plaintext note insertion (i.e. a refund)
  encodedNoteOwnerH1: BigInt
  encodedNoteOwnerH2: BigInt
  encodedNoteEncodedAssetAddr: BigInt
  encodedNoteEncodedAssetId: BigInt
  encodedNoteValue: BigInt
  encodedNoteNonce: BigInt

  # encrypted note insertion (from a joinsplit)
  encryptedNoteCiphertextBytes: Bytes
  encryptedNoteEncapsulatedSecretBytes: Bytes
  encryptedNoteCommitment: BigInt

  # nullifier
  nullifier: BigInt

  # tree batch filled with zeros
  filledBatchWithZerosUpToMerkleIndex: BigInt
}
