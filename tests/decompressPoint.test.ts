
import { BigInt } from "@graphprotocol/graph-ts";
import { describe, test, assert } from "matchstick-as/assembly/index"
import { decompressPoint, Point } from "../src/pointCompression";

const TEST_VECTORS_INPUTS = [
  BigInt.fromString('1814110601147239024298789635012697494996190218568527774863020202418677723317'),
  BigInt.fromString('9727956158421275631217716316458725660268946301978900893169653393225116891807'),
  BigInt.fromString('7355650106602990158973169992021980542257271901071737475857966730409496835690'),
  BigInt.fromString('7001201906750509448239824766578280946475997609180973849547288051958993083480'),
  BigInt.fromString('7378224102370453732157489999633574617251071169943713264176211815603916764012'),
  BigInt.fromString('1027072304383238593458247115162266918401336772910756875925013197462729507779'),
  BigInt.fromString('2372427915949278574728453511993505575374340829031222391461691138781718376877'),
  BigInt.fromString('5242360769188066785167619578772406535574163953380883284593493180020194232653'),
  BigInt.fromString('908623324042001847694059212985744133391440446510360308273060898721125838394'),
  BigInt.fromString('5499028812787567693336721147732442613813672456655833412374771219176632747020'),
  BigInt.fromString('6543023188617857539890813015476851342263083306999201336023351609726668363317'),
  BigInt.fromString('65702288254931094554835668292468590361076354964354032880724098364747780462'),
  BigInt.fromString('11918177026570922879797528660485246146611920192278222479893011430588309468141'),
  BigInt.fromString('367826399254925823160057182804184583960401153911793272502268752063927830964'),
  BigInt.fromString('3208585760759532476381258366402118140753983968463722667229630591123535605269')
]

const TEST_VECTORS_OUTPUTS = [
  new Point(BigInt.fromString('796341589641547066708238648279597845117180107732309655881569304120381126017'), BigInt.fromString('717496270015676857780652912554833805445917065196184587207198346293822740383')),
  new Point(BigInt.fromString('16381993817697030105093061546240641129196533747728204370754241923502411796347'), BigInt.fromString('17088372243551479165435683500425090644698265913218462227128890391932915103901')),
  new Point(BigInt.fromString('3036677114424391313315878276418651638426031777614650423413505085793870041316'), BigInt.fromString('4838121066725798129032817462177650984176425649863663003702970342250237798926')),
  new Point(BigInt.fromString('10185819389599829076317320079389935378061157396781300143852982158855479282708'), BigInt.fromString('13262201800909093655907501523234349697083921143334049979926516098758479005623')),
  new Point(BigInt.fromString('13365048002994501663262983219831079146504875956076616404550386779315101830263'), BigInt.fromString('17197150900873092760533002318122591236623487753170066484505639604424440997420')),
  new Point(BigInt.fromString('7098270920753526843280069658590963418911064759956406004926019579523112342660'), BigInt.fromString('9711959037689697317160614220006400487559977400217860158219295349471243333114')),
  new Point(BigInt.fromString('1362757169674443608228880184882610059942036027988947141624751212505936990991'), BigInt.fromString('1672278758281853811030863265653003353217495427583180973259489690571986430950')),
  new Point(BigInt.fromString('4444449724988743638703569091546440465642806653910958598086883778108018476123'), BigInt.fromString('15293845989551649630670671155110254409303994256878183681223313368590391083060')),
  new Point(BigInt.fromString('19444597332933746876250532583093606238938948061524112258550830699005067177699'), BigInt.fromString('9808297000078746647421397706349049681111863997332334661959699084896329179812')),
  new Point(BigInt.fromString('20969060578640623480429566553221483610280310046642818334320725098768544082876'), BigInt.fromString('202170053862795332911359991324488479040074964494907576022139346645841347169')),
  new Point(BigInt.fromString('12073855706865393655492089795420050633830813028960805024517592579524369239513'), BigInt.fromString('10753133927810572804769077511300435008438073293291936484498642231892359247550')),
  new Point(BigInt.fromString('4238120588816461300160062959050802598479481596174929401430798268728939655584'), BigInt.fromString('1419591047382414376336972371031275851739679487707223808386472406531430717064')),
  new Point(BigInt.fromString('20754077938102965730705450919969813139696890346294333146810462934854899717395'), BigInt.fromString('6571462156160283853735840398957746340157080505981340330458233383095170167194')),
  new Point(BigInt.fromString('12871869807555335167348372571851267473776049645727504405208919616677219355139'), BigInt.fromString('3005307164554036093186064372565588687382025552871260842194182820505022171170')),
  new Point(BigInt.fromString('17577878958979529524823004917679394890947384213123208538948793403081579983921'), BigInt.fromString('17455618747311708974431999110800308972585650900448912892316599850244740132684')),
  new Point(BigInt.fromString('10261395652418395825437682690781261031903249716287399268128270196072372589'), BigInt.fromString('8961182346327760507694651745363812710531712504031766743812631064725569082119')),
  new Point(BigInt.fromString('12941177936157939344717239001382719718876203802836972754892641177826087429377'), BigInt.fromString('2203298694482690512783001520899741229457592745150309405203032134613613934715')),
  new Point(BigInt.fromString('4857616626223294071385611736457509513438579432581271680554257964651615146532'), BigInt.fromString('6589255960163825594975820752271324129494711160374671515140943118304269788149')),
  new Point(BigInt.fromString('8706028692621487874570412882373689588896499998118405480161269087348686696054'), BigInt.fromString('10952985503622603928600363944461288335164978916842824255556930116314042759357')),
  new Point(BigInt.fromString('13650351158784365224128807424040998427174833846911925923312131849868677764273'), BigInt.fromString('17676200438906098674911034129125243307146855895237251490681673164133669882405')),
  new Point(BigInt.fromString('17411334495022134320575256432704546475288066336509875443900838082859101131821'), BigInt.fromString('21091960828555692042705418661061978969711963615129825657120718708532861313016')),
  new Point(BigInt.fromString('10114405327309232105533972381999066092979984955203611930484597556185493949804'), BigInt.fromString('16417511385905484464336760626154179597635443997700945641968751139682824241980')),
  new Point(BigInt.fromString('15464097795188719169400928977661884089502006418988552078298945156683051188454'), BigInt.fromString('4627889109869271353277778399787442943657763229914202438567192054859760708335')),
  new Point(BigInt.fromString('3430690947391037967051858488061770060134639661833428838961747536115901880402'), BigInt.fromString('9964576515675450066184007390398303202336552322735713214546790509635580051665')),
  new Point(BigInt.fromString('2533884738780813874691396478394205569894438336475404529847182877015325356442'), BigInt.fromString('7029590442595499861469690494305658603484200498140225202482602477346957456209')),
  new Point(BigInt.fromString('14594651160938230303933662283859315911571705965841554690936833486203990380411'), BigInt.fromString('9320846284542774756984386154785081107168106948048254325818964553441658874288')),
  new Point(BigInt.fromString('15463854403013952279077440561131827328423664252812812537593674274147485521127'), BigInt.fromString('4528236695461564699578182545836452137998337495545489929119942440509516632903')),
  new Point(BigInt.fromString('10602220256381295307423339987260301781966445913610885310026831644655272231243'), BigInt.fromString('7765072682951246447282079503714169172517733878527928997579826261222667677348')),
  new Point(BigInt.fromString('21615742311586237369627445148670298506211683645972140450186953817938549345549'), BigInt.fromString('3246092518152139284165823040884124762571706529349794878283086722419045721787')),
  new Point(BigInt.fromString('8114268282556071874720660245567486371562151813670529009535670300629696409150'), BigInt.fromString('4853937669993535752839131238039225337051833430778929397388810177534566024298'))
]

describe("decompressPoint", () => {
  test("matches crypto-utils test cases", () => {
    for (let i = 0; i < TEST_VECTORS_INPUTS.length; i++) {
      const input = TEST_VECTORS_INPUTS[i];
      const expected = TEST_VECTORS_OUTPUTS[i];
      const actual = decompressPoint(input);
      // assert.assertNonNull doesn't seem to compile for some reason
      if (actual === null) throw new Error("result should not be null!");

      assert.bigIntEquals(expected.x, actual.x);
      assert.bigIntEquals(expected.y, actual.y);
    }
  });
});
